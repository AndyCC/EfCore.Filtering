name: nuget-build-and-deploy
on:
 push:
  tags:
    - '*'
    
env:
  SOLUTION_NAME: 'EFCore.Filtering.sln'
  PROJECT_PATH: 'EfCore.Filtering.Mvc/EfCore.Filtering.Mvc.csproj'
  TEST_PROJECT_PATH: 'Tests.EfCore.Filtering/Tests.EfCore.Filtering.csproj'
  CONFIGURATION: 'Release'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}\output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v1/index.json'

jobs:
 build_test_deploy:
  if: github.event.base_ref == 'refs/heads/main'
  name: 'Build'
  runs-on: 'windows-latest'  
  steps:
  - name: 'Checkout'
    uses: actions/checkout@v2

  - name: 'Setup dot net 5 and 6'
    uses: 'actions/setup-dotnet@v1'
    with:
     dotnet-version: |
      5.x
      6.x
      
  - name: 'Restore packages'
    run: dotnet restore ${{ env.SOLUTION_NAME }}
        
  - name: Build Solution
    run: dotnet build ${{ env.SOLUTION_NAME }} --no-restore --configuration ${{ env.CONFIGURATION }}

  - name: Tests
    run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-build --no-restore

  - name: Build
    run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration ${{ env.CONFIGURATION }}

  - name: 'Get version'
    id: get_version
    uses: battila7/get-version-action@v2
   
  - run: echo "github ref  ${{ github.ref }}"
  - run: echo "version ${{ steps.get_version.outputs.version }}"
  - run: echo "${{ steps.get_version.outputs.version-without-v }}"

  - name: 'Pack project'
    run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --configuration ${{ env.CONFIGURATION }} --include-symbols -p:PackageVersion=${{ steps.get_version.outputs.version-without-v }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

  #- name: 'Push package'
  #  run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}\*.nupkg -k ${{ secrets.NUGET_AUTH_TOKEN }} -s ${{ env.NUGET_SOURCE_URL }}
  
  #- name: Create Release
  #  uses: actions/create-release@v1
  #  env:
  #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #  with:
  #   tag_name: ${{ github.ref }}
  #   release_name: Release ${{ github.ref }}
  #   draft: false
  #   prerelease: false